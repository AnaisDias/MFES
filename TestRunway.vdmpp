class TestRunway
types

		public Point :: x:int
									y:int;
values
-- TODO Define values here
instance variables
	public returnInt : int := 0;
operations
	public TestRunway: () ==> TestRunway
	TestRunway () ==
	(
		return self;
	);
	
	private assertTrue: bool ==> ()
  assertTrue(cond) == return
  pre cond;
  
  
  public testAddPlaneSuccess: () ==> ()
  testAddPlaneSuccess() ==
  (
  	dcl r: Runway := new Runway(19,0,<N>,5);
  	dcl p1: Airplane := new Airplane(1,19,0,<N>,1,19,0);
  	dcl p2: Airplane := new Airplane(2,19,0,<N>,1,19,0);
  	assertTrue(len r.getPlanes() = 0);
  	r.addPlane(p1);
  	assertTrue(len r.getPlanes() = 1);
  	r.addPlane(p2);
  	assertTrue(len r.getPlanes() = 2);
  	IO`println("Function testAddPlaneSuccess() success!");
  );
  
  public testRemovePlane: () ==> ()
  testRemovePlane() ==
  (
  	dcl r: Runway := new Runway(19,0,<N>,5);
  	dcl p1: Airplane := new Airplane(0,19,0,<N>,1,19,0);
  	dcl p2: Airplane := new Airplane(1,19,0,<N>,1,19,0);
  	dcl p3: Airplane := new Airplane(2,19,0,<N>,1,19,0);
  	dcl p4: Airplane := new Airplane(3,19,0,<N>,1,19,0);
  	assertTrue(len r.getPlanes() = 0);
  	r.addPlane(p1);
  	r.addPlane(p2);
  	r.addPlane(p3);
  	r.addPlane(p4);
  	assertTrue(len r.getPlanes() = 4);
  	r.removePlane(p3);
  	for p in r.getPlanes() do
  		assertTrue(p.getID() <> 2);
  	r.removePlane(p1);
  	for p in r.getPlanes() do
  		assertTrue(p.getID() <> 0);
  	IO`println("Function testRemovePlane() success!");
  );  
  
  -- Should fail duplicate breaks pre condition
  public testAddDupPlane: () ==> ()
  testAddDupPlane() ==
  (
  	dcl r: Runway := new Runway(19,0,<N>,5);
  	dcl p1: Airplane := new Airplane(0,19,0,<N>,1,19,0);
  	r.addPlane(p1);
  	r.addPlane(p1);
  
  );
  
  -- Should fail
  public testMaximumCapacity: () ==> ()
  testMaximumCapacity() ==
  (
  	dcl r: Runway := new Runway(5,5,<N>,0);
  	dcl p1: Airplane := new Airplane(0,5,5,<N>,1,5,5);
  	r.addPlane(p1);
  );
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end TestRunway