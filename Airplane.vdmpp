class Airplane
types
	public Point :: x:int
							y:int;
	public Orientation = <N>|<NW>|<W>|<SW>|<S>|<SE>|<E>|<NE>;
	public String :: seq of char;
values
-- TODO Define values here
instance variables
	public idPlane : nat; -- id of this plane
	private position : Point; -- Current position of the plane
	private orientation : Orientation; -- Current orientation of the plane 
	private targetRotation : int := 0;
	private curPos : real := 0; -- 0 to 1. This is incremented by the speed each clock tick
	private speed : real; -- 0.1 to 1.0 . Speed of the plane.
	private targetSpeed : real;
	private goal : Point; -- Current primary goal of the plane.
	private secGoal : Point := mk_Point(-1,-1); -- Current secGoal of the plane or a beacon. 
	private outOfReach : bool := false; -- When the plane leaves the map if it is the goal
	private landed : bool := false;	-- Plane landed in the runway or not

-- Invariants;
	inv curPos >= 0;
	inv speed > 0 and targetSpeed > 0;
	
-- Help variable for the orientation change

	public orientations : map Orientation to int := {<N> |-> 0, <NW> |-> 45,
																									<W> |-> 90, <SW> |-> 135,
																									<S> |-> 180, <SE> |-> 225,
																									<E> |-> 270, <NE> |-> 315};
-- Return variables for move
	public MOVE_SUCCESS: int := 0;
	public REACHED_GOAL : int := 1;
	public LANDED : int := 2;
	public BEACON : int := 3;
	public FAILED : int := 4;
		
operations

	--Constructor for the Airplane
	public Airplane: nat * int * int * Orientation * real * int * int ==> Airplane
	Airplane(id,x,y,ori,s, gx, gy) == 
	(
		position := mk_Point(x,y);
		speed := s;
		targetSpeed := s;
		orientation := ori;
		idPlane := id;
		goal := mk_Point(gx,gy);
		return self;
	)
	pre ( (x = 0 or x = 19) and y >= 0 and y <= 19) or (x >= 0 and x <= 19 and (y = 0 or y = 19) ) and s > 0 
		and s <= 1 and (s*10 rem 1) = 0 and gx >= -20 and gx <= 20 and gy >= -20 and gy <= 20;
	
	--Gets id of the plane
	public getID: () ==> nat
	getID() ==
	(
		return idPlane;
	);
	--Get position x of the plane
	public getPos: () ==> Point
	getPos() ==
	(
		return position;
	);
	
	--Get Speed of a plane
	public getSpeed: () ==> real
	getSpeed() ==
	(
		return speed;
	);
	
	--Set Goal
	public setGoal: int * int ==> ()
	setGoal(x,y) ==
	(
			goal := mk_Point(x,y);
	)
	pre x >= -20 and x <= 20 and y >= -20 and y <= 20;
	
	--Get Goal
	public getGoal: () ==> Point
	getGoal() ==
	(
		return goal;
	);
	
	--Set secGoal
	public setSecGoal: int * int ==> ()
	setSecGoal(x,y) ==
	(
			secGoal := mk_Point(x,y);
	)
	pre x >= -1 and x < 20 and y >= -1 and y < 20;
	
	--Get secGoal
	public getSecGoal: () ==> Point
	getSecGoal() ==
	(
		return secGoal;
	);
	
	--Get orientation
	public getOrientation: () ==> Orientation
	getOrientation() ==
	(
		return orientation;
	);
	
	--Change landed
	public setLanded: () ==> ()
	setLanded() ==
	(
		landed := not landed;
	)
	pre speed < 0.3
	post landed <> landed~;
	
	--Get landed
	public getLanded: () ==> bool
	getLanded() ==
	(
		return landed;
	);
	
	--Get out of Reach
	public getOutOfReach: () ==> bool
	getOutOfReach() ==
	(
		return outOfReach;
	);
	
	--Get angle in degrees
	private getAngle: () ==> nat
	getAngle() ==
	(
		return orientations(orientation);
	);
	
	--Convert angle  to Orientation
	private convertAngle: int ==> Orientation
	convertAngle(ang) ==
	(
		if(ang = -45) then return <NE>
		else if(ang = 0) then return <N>
		else if(ang = 45) then return <NW>
		else if(ang = 90) then return <W>
		else if(ang = 135) then return <SW>
		else if(ang = 180) then return <S>
		else if(ang = 225) then return <SE>
		else if(ang = 270) then return <E>
		else if(ang = 315) then return <NE>
		else return <N>;
	
	);
	
	-- Sets the target rotation of the plane
	public setTargetRotation: int ==> ()
	setTargetRotation (ori) ==
	(
		targetRotation := ori;
	)
	pre (ori rem 45) = 0 or ori = 0;
	
	-- Sets the target speed of the plane
	public setTargetSpeed: real ==> ()
	setTargetSpeed (sp) ==
	(
		targetSpeed := sp;
	)
	pre sp <= 1 and sp > 0;
	
	-- speeds or slows down the plane --
	private setSpeed: () ==> ()
	setSpeed() == 
	(
		if( speed < targetSpeed) then
		(
			if(abs (speed - targetSpeed) >= 0.2) then
			(
				speed := speed + 0.2;
			)
			else
			(
				speed := speed + 0.1;
			);
		)
		else if(speed > targetSpeed) then
		(
			if(abs (speed - targetSpeed) >= 0.2) then
			(
				speed := speed - 0.2;
			)
			else
			(
				speed := speed - 0.1;
			);
		);	
	);
		
	-- rotates the plane acording to the target orientation
	private setOrientation: () ==> ()
	setOrientation() ==
	(
		
		if( targetRotation > 0) then
		(
		 orientation := convertAngle(getAngle()+45);
		 targetRotation := targetRotation - 45;
		)
		else if (targetRotation < 0) then 
		(
			orientation := convertAngle(getAngle()-45);
			targetRotation := targetRotation + 45;
		)
	);
	
	-- function used in move to calculate which orientation must the plane have to reach the goal
	private calcOrientation: () ==> ()
	calcOrientation () ==
	(
		if(secGoal.x < position.x) then
		(
			if(secGoal.y < position.y) then	( -- SW --
				if( ((getAngle()- orientations(<SW>) ) <= 180 and
						(getAngle()- orientations(<SW>))  > 0)
						or (getAngle()- orientations(<SW>)) <= - 180) then
				(
					orientation := convertAngle(getAngle()-45);
				)
				else if( ((getAngle()- orientations(<SW>) ) >- 180 and
						(getAngle()- orientations(<SW>))  < 0) 
						or (getAngle()- orientations(<SW>)) > 180) then
				(
					orientation := convertAngle(getAngle()+45);
				)
			)
			else if(secGoal.y > position.y) then ( -- NW --
				if( ((getAngle()- orientations(<NW>) ) <= 180 and
						(getAngle()- orientations(<NW>))  > 0)
						or (getAngle()- orientations(<NW>)) <= - 180) then
				(
					orientation := convertAngle(getAngle()-45);
				)
				else if( ((getAngle()- orientations(<NW>) ) >- 180 and
						(getAngle()- orientations(<NW>))  < 0) 
						or (getAngle()- orientations(<NW>)) > 180) then
				(
					orientation := convertAngle(getAngle()+45);
				)
			)
			else ( -- W --
				if( ((getAngle()- orientations(<W>) ) <= 180 and
						(getAngle()- orientations(<W>))  > 0)
						or (getAngle()- orientations(<W>)) <= - 180) then
				(
					orientation := convertAngle(getAngle()-45);
				)
				else if( ((getAngle()- orientations(<W>) ) >- 180 and
						(getAngle()- orientations(<W>))  < 0) 
						or (getAngle()- orientations(<W>)) > 180) then
				(
					orientation := convertAngle(getAngle()+45);
				)
			);
		)
		else if(secGoal.x > position.x) then
		(
			if(secGoal.y < position.y) then	( -- SE --
				if( ((getAngle()- orientations(<SE>) ) <= 180 and
						(getAngle()- orientations(<SE>))  > 0)
						or (getAngle()- orientations(<SE>)) <= - 180) then
				(
					orientation := convertAngle(getAngle()-45);
				)
				else if( ((getAngle()- orientations(<SE>) ) >- 180 and
						(getAngle()- orientations(<SE>))  < 0) 
						or (getAngle()- orientations(<SE>)) > 180) then
				(
					orientation := convertAngle(getAngle()+45);
				)
			)
			else if(secGoal.y > position.y) then ( -- NE --
				if( ((getAngle()- orientations(<NE>) ) <= 180 and
						(getAngle()- orientations(<NE>))  > 0)
						or (getAngle()- orientations(<NE>)) <= - 180) then
				(
					orientation := convertAngle(getAngle()-45);
				)
				else if( ((getAngle()- orientations(<NE>) ) >- 180 and
						(getAngle()- orientations(<NE>))  < 0) 
						or (getAngle()- orientations(<NE>)) > 180) then
				(
					orientation := convertAngle(getAngle()+45);
				)
			)
			else ( -- E --
				if( ((getAngle()- orientations(<E>) ) <= 180 and
						(getAngle()- orientations(<E>))  > 0)
						or (getAngle()- orientations(<E>)) <= - 180) then
				(
					orientation := convertAngle(getAngle()-45);
				)
				else if( ((getAngle()- orientations(<E>) ) >- 180 and
						(getAngle()- orientations(<E>))  < 0) 
						or (getAngle()- orientations(<E>)) > 180) then
				(
					orientation := convertAngle(getAngle()+45);
				)
			)
		)
		else ( -- S --
			if(secGoal.y < position.y) then	(
				if( ((getAngle()- orientations(<S>) ) <= 180 and
						(getAngle()- orientations(<S>))  > 0)
						or (getAngle()- orientations(<S>)) <= - 180) then
				(
					orientation := convertAngle(getAngle()-45);
				)
				else if( ((getAngle()- orientations(<S>) ) >- 180 and
						(getAngle()- orientations(<S>))  < 0) 
						or (getAngle()- orientations(<S>)) > 180) then
				(
					orientation := convertAngle(getAngle()+45);
				)
			) -- N --
			else if(secGoal.y > position.y) then(
				if( ((getAngle()- orientations(<N>) ) <= 180 and
						(getAngle()- orientations(<N>))  > 0)
						or (getAngle()- orientations(<N>)) <= - 180) then
				(
					orientation := convertAngle(getAngle()-45);
				)
				else if( ((getAngle()- orientations(<N>) ) >- 180 and
						(getAngle()- orientations(<N>))  < 0) 
						or (getAngle()- orientations(<N>)) > 180) then
				(
					orientation := convertAngle(getAngle()+45);
				)
			)
		);
	)
	post orientations = orientations~ and secGoal = secGoal~ and position = position~;
	
	-- function to calculate movement of the plane when there is a secGoal
	private calcMovement: () ==> int
	calcMovement () ==
	(
		if (orientation = <N>) then
				(
					curPos:= curPos + speed;
					if(curPos >= 1.0) then 
					(
						curPos := curPos - 1.0;
						position.y := position.y + 1;
						
						-- If objective is <N> which is goal(0,20)
						if( position.y > 19 and goal.x = 0 and goal.y = 20) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						else if (position.x = goal.x and position.y = goal.y and speed < 0.3) then
						(
							speed := 0.1;
							return LANDED;
						)
						else if (position.y > 19) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <NE>) then
				(
					--position.y := position.y + speed;
					--position.x := position.x + speed;
					curPos := curPos + speed;
					if( curPos >= 1.0 ) then
					(
						curPos := curPos - 1;
						position.y := position.y + 1;
						position.x := position.x + 1;
						
						-- If objective is <N> which is goal(0,20) or <E> which is goal(20,0)
						if( (position.y > 19 and goal.x = 0 and goal.y = 20) 
								or (position.x > 19 and goal.x = 20 and goal.y = 0)) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						else if (position.x = goal.x and position.y = goal.y and speed < 0.3) then
						(
							speed := 0.1;
							return LANDED;
						)
						else if (position.y > 19 or position.x > 19) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <E>) then
				(
					--position.x := position.x + speed;
					curPos:= curPos + speed;
					if(curPos >= 1.0) then 
					(
						curPos := curPos - 1.0;
						position.x := position.x + 1;
						
						-- If objective is <E> which is goal(20,0)
						if( position.x > 19 and goal.x = 20 and goal.y = 0) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						else if (position.x = goal.x and position.y = goal.y and speed < 0.3) then
						(
							speed := 0.1;
							return LANDED;
						)
						else if (position.x > 19) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <SE>) then
				(
					--position.y := position.y - speed;
					--position.x := position.x + speed;
					
					curPos := curPos + speed;
					if( curPos >= 1.0 ) then
					(
						curPos := curPos - 1;
						position.y := position.y - 1;
						position.x := position.x + 1;
						
						-- If objective is <S> which is goal(0,-20) or <E> which is goal(20,0)
						if( (position.y < 0 and goal.x = 0 and goal.y = -20) 
								or (position.x > 19 and goal.x = 20 and goal.y = 0)) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						else if (position.x = goal.x and position.y = goal.y and speed < 0.3) then
						(
							speed := 0.1;
							return LANDED;
						)
						else if (position.y < 0 or position.x > 19) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <S>) then
				(
					--position.y := position.y - speed;
					curPos:= curPos + speed;
					if(curPos >= 1.0) then 
					(
						curPos := curPos - 1.0;
						position.y := position.y - 1;
						
						-- If objective is <S> which is goal(0,-20)
						if( position.y < 0 and goal.x = 0 and goal.y = -20) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						else if (position.x = goal.x and position.y = goal.y and speed < 0.3) then
						(
							speed := 0.1;
							return LANDED;
						)
						else if (position.y < 0) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <SW>) then
				(
					--position.y := position.y - speed;
					--position.x := position.x - speed;
					
					curPos := curPos + speed;
					if( curPos >= 1.0 ) then
					(
						curPos := curPos - 1;
						position.y := position.y - 1;
						position.x := position.x - 1;
						
						-- If objective is <S> which is goal(0,-20) or <W> which is goal(-20,0)
						if( (position.y < 0 and goal.x = 0 and goal.y = -20) 
								or (position.x < 0 and goal.x = -20 and goal.y = 0)) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						else if (position.x = goal.x and position.y = goal.y and speed < 0.3) then
						(
							speed := 0.1;
							return LANDED;
						)
						else if (position.y < 0 or position.x < 0) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <W>) then
				(
					
					curPos:= curPos + speed;
					if(curPos >= 1.0) then 
					(
						curPos := curPos - 1.0;
						position.x := position.x - 1;
						
						-- If objective is <W> which is goal(-20,0)
						if( position.x < 0 and goal.x = -20 and goal.y = 0) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						else if (position.x = goal.x and position.y = goal.y and speed < 0.3) then
						(
							speed := 0.1;
							return LANDED;
						)
						else if (position.x < 0) then (
							return FAILED;
						);
					);
				)
				else (
					--position.y := position.y + speed;
					--position.x := position.x - speed;
					
					curPos := curPos + speed;
					if( curPos >= 1.0 ) then
					(
						curPos := curPos - 1;
						position.y := position.y + 1;
						position.x := position.x - 1;
						
						-- If objective is <N> which is goal(0,20) or <W> which is goal(-20,0)
						if( (position.y > 19 and goal.x = 0 and goal.y = 20) 
								or (position.x < 0 and goal.x = -20 and goal.y = 0)) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						else if (position.x = goal.x and position.y = goal.y and speed < 0.3) then
						(
							speed := 0.1;
							return LANDED;
						)
						else if (position.y > 19 or position.x < 0) then (
							return FAILED;
						);
					);
				);
				
			return MOVE_SUCCESS;
	)
	post curPos < 1 and curPos >= 0 and orientation = orientation~ and goal = goal~;
	
	private calcMovementSec: () ==> int
	calcMovementSec () ==
	(
		if (orientation = <N>) then
				(
					curPos:= curPos + speed;
					if(curPos >= 1.0) then 
					(
						curPos := curPos - 1.0;
						position.y := position.y + 1;
						
						-- If objective is <N> which is goal(0,20)
						if( position.y > 19 and goal.x = 0 and goal.y = 20) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						-- BEACON <N>
						else if (position.x = secGoal.x and position.y = secGoal.y) then
						(
							secGoal := mk_Point(-1,-1);
							return BEACON;
						)
						else if (position.y > 19) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <NE>) then
				(
					
					curPos := curPos + speed;
					if( curPos >= 1.0 ) then
					(
						curPos := curPos - 1;
						position.y := position.y + 1;
						position.x := position.x + 1;
						
						-- If objective is <N> which is goal(0,20) or <E> which is goal(20,0)
						if( (position.y > 19 and goal.x = 0 and goal.y = 20) 
								or (position.x > 19 and goal.x = 20 and goal.y = 0)) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						-- BEACON <NE>
						else if (position.x = secGoal.x and position.y = secGoal.y) then
						(
							secGoal := mk_Point(-1,-1);
							return BEACON;
						)
						else if (position.y > 19 or position.x > 19) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <E>) then
				(
				
					curPos:= curPos + speed;
					if(curPos >= 1.0) then 
					(
						curPos := curPos - 1.0;
						position.x := position.x + 1;
						
						-- If objective is <E> which is goal(20,0)
						if( position.x > 19 and goal.x = 20 and goal.y = 0) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						-- BEACON <E>
						else if (position.x = secGoal.x and position.y = secGoal.y) then
						(
							secGoal := mk_Point(-1,-1);
							return BEACON;
						)
						else if (position.x > 19) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <SE>) then
				(
					
					curPos := curPos + speed;
					if( curPos >= 1.0 ) then
					(
						curPos := curPos - 1;
						position.y := position.y - 1;
						position.x := position.x + 1;
						
						-- If objective is <S> which is goal(0,-20) or <E> which is goal(20,0)
						if( (position.y < 0 and goal.x = 0 and goal.y = -20) 
								or (position.x > 19 and goal.x = 20 and goal.y = 0)) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						-- BEACON <SE>
						else if (position.x = secGoal.x and position.y = secGoal.y) then
						(
							secGoal := mk_Point(-1,-1);
							return BEACON;
						)
						else if (position.y < 0 or position.x > 19) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <S>) then
				(
					
					curPos:= curPos + speed;
					if(curPos >= 1.0) then 
					(
						curPos := curPos - 1.0;
						position.y := position.y - 1;
						
						-- If objective is <S> which is goal(0,-20)
						if( position.y < 0 and goal.x = 0 and goal.y = -20) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						-- BEACON <S>
						else if (position.x = secGoal.x and position.y = secGoal.y) then
						(
							secGoal := mk_Point(-1,-1);
							return BEACON;
						)
						else if (position.y < 0) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <SW>) then
				(
										
					curPos := curPos + speed;
					if( curPos >= 1.0 ) then
					(
						curPos := curPos - 1;
						position.y := position.y - 1;
						position.x := position.x - 1;
						
						-- If objective is <S> which is goal(0,-20) or <W> which is goal(-20,0)
						if( (position.y < 0 and goal.x = 0 and goal.y = -20) 
								or (position.x < 0 and goal.x = -20 and goal.y = 0)) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						-- BEACON <SW>
						else if (position.x = secGoal.x and position.y = secGoal.y) then
						(
							secGoal := mk_Point(-1,-1);
							return BEACON;
						)
						else if (position.y < 0 or position.x < 0) then (
							return FAILED;
						);
					);
				)
				else if (orientation = <W>) then
				(
					--position.x := position.x - speed;
					
					curPos:= curPos + speed;
					if(curPos >= 1.0) then 
					(
						curPos := curPos - 1.0;
						position.x := position.x - 1;
						
						-- If objective is <W> which is goal(-20,0)
						if( position.x < 0 and goal.x = -20 and goal.y = 0) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						-- BEACON <W>
						else if (position.x = secGoal.x and position.y = secGoal.y) then
						(
							secGoal := mk_Point(-1,-1);
							return BEACON;
						)
						else if (position.x < 0) then (
							return FAILED;
						);
					);
				)
				else (
					
					curPos := curPos + speed;
					if( curPos >= 1.0 ) then
					(
						curPos := curPos - 1;
						position.y := position.y + 1;
						position.x := position.x - 1;
						
						-- If objective is <N> which is goal(0,20) or <W> which is goal(-20,0)
						if( (position.y > 19 and goal.x = 0 and goal.y = 20) 
								or (position.x < 0 and goal.x = -20 and goal.y = 0)) then 
						(
							outOfReach := true;
							return REACHED_GOAL;
						)
						-- BEACON <NW>
						else if (position.x = secGoal.x and position.y = secGoal.y) then
						(
							secGoal := mk_Point(-1,-1);
							return BEACON;
						)
						else if (position.y > 19 or position.x < 0) then (
							return FAILED;
						);
					);
				);
				
			return MOVE_SUCCESS;
	)
	post curPos < 1 and curPos >= 0 and orientation = orientation~ and goal = goal~;
	
	-- function to move the plane
	public move: () ==> int
	move() ==
	(
		if(secGoal.x = -1 or secGoal.y = -1) then
		(
			setSpeed();
			setOrientation();
			return calcMovement();
		)
		-- secGoal exists
		else
		(
			setSpeed();
			calcOrientation();
			return calcMovementSec();
		);
	) 
	post curPos <> curPos~ or position <> position~;
	
functions
-- TODO Define functiones here
traces
-- TODO Define Combinatorial Test Traces here
end Airplane